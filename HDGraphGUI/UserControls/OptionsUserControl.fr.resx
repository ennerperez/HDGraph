<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="groupBox2.Text" xml:space="preserve">
    <value>Démarrage de l'application</value>
  </data>
  <data name="groupBox1.Text" xml:space="preserve">
    <value>Menu du clic droit</value>
  </data>
  <data name="tabPageRightClic.Text" xml:space="preserve">
    <value>Comportement de l'application</value>
  </data>
  <data name="label1.Text" xml:space="preserve">
    <value>Cette opération va télécharger, de manière anonyme sur le site web HDGraph.com, un petit fichier contenant le numéro de la dernière version disponible.</value>
  </data>
  <data name="checkBox1.Text" xml:space="preserve">
    <value>Vérifier les mise à jour au démarrage de l'application.</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="checkBoxAllowDeleteOption.Size" type="System.Drawing.Size, System.Drawing">
    <value>302, 17</value>
  </data>
  <data name="checkBoxAllowDeleteOption.Text" xml:space="preserve">
    <value>Autoriser la suppression de répertoire via menu du clic droit</value>
  </data>
  <data name="checkBoxDeletionAsk4Confirmation.Size" type="System.Drawing.Size, System.Drawing">
    <value>287, 17</value>
  </data>
  <data name="checkBoxDeletionAsk4Confirmation.Text" xml:space="preserve">
    <value>Toujours demander une confirmation avant suppression</value>
  </data>
  <data name="tabPageScanEngine.Text" xml:space="preserve">
    <value>Moteur de scan</value>
  </data>
  <data name="labelScanEngineDesc.Text" xml:space="preserve">
    <value>Le moteur de scan est le composant chargé de l'énumération des fichiers et dossiers. Il établit un rapport qui sera utilisé par HDGraph pour dessiner le graphique.</value>
  </data>
  <data name="groupBoxEngine.Text" xml:space="preserve">
    <value>Choisissez un moteur de scan</value>
  </data>
  <data name="checkBoxIgnoreReparsePoints.CheckAlign" type="System.Drawing.ContentAlignment, System.Drawing">
    <value>TopLeft</value>
  </data>
  <data name="checkBoxIgnoreReparsePoints.Size" type="System.Drawing.Size, System.Drawing">
    <value>480, 44</value>
  </data>
  <data name="checkBoxIgnoreReparsePoints.Text" xml:space="preserve">
    <value>Exclure les liens lors du parcours de l'arborescence.
Cochez pour exclure de l'analyse les liens symboliques afin d'éviter les doublons dans le calcul de l'espace occupé. Fonctionne uniquement pour le moteur "natif".</value>
  </data>
  <data name="radioButtonNativeEngine.Text" xml:space="preserve">
    <value>Moteur "natif" : utilise l'API native du système. Ce mode est plus rapide et plus précis, mais son fonctionnement n'est pas garanti sur tous les systèmes.</value>
  </data>
  <data name="radioButtonSimpleEngine.Text" xml:space="preserve">
    <value>Moteur standard : utilise l'API .Net. Ce mode est plus robuste (il fonctionne sur tous les systèmes), mais il est moins rapide et peut être moins précis dans certains cas.</value>
  </data>
</root>